// -------------------------------------------------------------
//
// Module: Task1_matlab
// Generated by MATLAB(R) 8.5 and the Filter Design HDL Coder 2.9.7.
// Generated on: 2016-05-04 10:12:34
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: D:\Melexis\Labs\Lab4\Matlab_1
// Name: Task1_matlab
// SerialPartition: 9
// TargetLanguage: Verilog
// TestBenchName: Task1_matlab_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully Serial
// Multipliers           : 1
// Folding Factor        : 9
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 11
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s6,5 -> [-1 1)
// Input             : s18,17 -> [-1 1)
// Filter Internals  : Specify Precision
//   Output          : s18,17 -> [-1 1)
//   Product         : s23,22 -> [-1 1)
//   Accumulator     : s25,22 -> [-4 4)
//   Round Mode      : convergent
//   Overflow Mode   : wrap
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Task1_matlab
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [17:0] filter_in; //sfix18_En17
  output  signed [17:0] filter_out; //sfix18_En17

////////////////////////////////////////////////////////////////
//Module Architecture: Task1_matlab
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [5:0] coeff1 = 6'b111101; //sfix6_En5
  parameter signed [5:0] coeff2 = 6'b111000; //sfix6_En5
  parameter signed [5:0] coeff3 = 6'b111000; //sfix6_En5
  parameter signed [5:0] coeff4 = 6'b000000; //sfix6_En5
  parameter signed [5:0] coeff5 = 6'b001011; //sfix6_En5
  parameter signed [5:0] coeff6 = 6'b010000; //sfix6_En5
  parameter signed [5:0] coeff7 = 6'b001011; //sfix6_En5
  parameter signed [5:0] coeff8 = 6'b000000; //sfix6_En5
  parameter signed [5:0] coeff9 = 6'b111000; //sfix6_En5
  parameter signed [5:0] coeff10 = 6'b111000; //sfix6_En5
  parameter signed [5:0] coeff11 = 6'b111101; //sfix6_En5

  // Signals
  reg  [3:0] cur_count; // ufix4
  wire phase_8; // boolean
  wire phase_0; // boolean
  reg  signed [17:0] delay_pipeline [0:10] ; // sfix18_En17
  wire signed [17:0] inputmux_1; // sfix18_En17
  reg  signed [24:0] acc_final; // sfix25_En22
  reg  signed [24:0] acc_out_1; // sfix25_En22
  wire signed [22:0] product_1; // sfix23_En22
  wire signed [5:0] product_1_mux; // sfix6_En5
  wire signed [23:0] mul_temp; // sfix24_En22
  wire signed [24:0] prod_typeconvert_1; // sfix25_En22
  wire signed [24:0] acc_sum_1; // sfix25_En22
  wire signed [24:0] acc_in_1; // sfix25_En22
  wire signed [24:0] add_signext; // sfix25_En22
  wire signed [24:0] add_signext_1; // sfix25_En22
  wire signed [25:0] add_temp; // sfix26_En22
  wire signed [17:0] output_typeconvert; // sfix18_En17
  reg  signed [17:0] output_register; // sfix18_En17

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 4'b1000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 4'b1000) begin
            cur_count <= 4'b0000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // Counter_process

  assign  phase_8 = (cur_count == 4'b1000 && clk_enable == 1'b1)? 1 : 0;

  assign  phase_0 = (cur_count == 4'b0000 && clk_enable == 1'b1)? 1 : 0;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
      end
      else begin
        if (phase_8 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
        end
      end
    end // Delay_Pipeline_process


  assign inputmux_1 = (cur_count == 4'b0000) ? delay_pipeline[0] :
                     (cur_count == 4'b0001) ? delay_pipeline[1] :
                     (cur_count == 4'b0010) ? delay_pipeline[2] :
                     (cur_count == 4'b0011) ? delay_pipeline[4] :
                     (cur_count == 4'b0100) ? delay_pipeline[5] :
                     (cur_count == 4'b0101) ? delay_pipeline[6] :
                     (cur_count == 4'b0110) ? delay_pipeline[8] :
                     (cur_count == 4'b0111) ? delay_pipeline[9] :
                     delay_pipeline[10];

  //   ------------------ Serial partition # 1 ------------------

  assign product_1_mux = (cur_count == 4'b0000) ? coeff1 :
                        (cur_count == 4'b0001) ? coeff2 :
                        (cur_count == 4'b0010) ? coeff3 :
                        (cur_count == 4'b0011) ? coeff5 :
                        (cur_count == 4'b0100) ? coeff6 :
                        (cur_count == 4'b0101) ? coeff7 :
                        (cur_count == 4'b0110) ? coeff9 :
                        (cur_count == 4'b0111) ? coeff10 :
                        coeff11;
  assign mul_temp = inputmux_1 * product_1_mux;
  assign product_1 = mul_temp[22:0];

  assign prod_typeconvert_1 = $signed({{2{product_1[22]}}, product_1});

  assign add_signext = prod_typeconvert_1;
  assign add_signext_1 = acc_out_1;
  assign add_temp = add_signext + add_signext_1;
  assign acc_sum_1 = add_temp[24:0];

  assign acc_in_1 = (phase_0 == 1'b1) ? prod_typeconvert_1 :
                   acc_sum_1;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_1_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        acc_final <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_final <= acc_out_1;
        end
      end
    end // Finalsum_reg_process

  assign output_typeconvert = (acc_final[22:0] + {acc_final[5], {4{~acc_final[5]}}})>>>5;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_8 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // Task1_matlab
